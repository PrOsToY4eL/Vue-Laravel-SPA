<?php

namespace Tests\Unit;

use App\Services\AvatarReplacerService;
use App\Services\UploadFileService;
use App\User;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Image;
use Mockery;
use Storage;
use Tests\TestCase;


class AvatarReplacerMockTest extends TestCase
{
    /* @var AvatarReplacerService $avatarReplacerService*/
    private $avatarReplacerService;
    /* @var User $user*/
    private $user;

    private const DEFAULT_PATH = 'storage/avatars/default.png';
    private const PATH = '/storage/avatars/user_0.png';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->make(['id' => 0]);

        $this->avatarReplacerService = $this->mockAvatarReplacer();
    }
    /**
     * @return void
     */
    public function testAvatarReplaceSuccess()
    {
       $avatar = UploadedFile::fake()->image('avatar.png', 100, 100)->size(100);

        $this->assertEquals(self::DEFAULT_PATH, $this->user->avatar);

        $this->avatarReplacerService->replaceUserAvatar($avatar);

        $this->assertEquals(self::PATH, $this->user->avatar);
    }
    private function mockAvatarReplacer()
    {
        $mock = Mockery::mock(AvatarReplacerService::class, new UploadFileService(), $this->user);
        $mock->shouldReceive('replaceUserAvatar')->andReturnUsing([$this, 'mockReplaceUserAvatar']);
        return $mock;
    }

    public function mockReplaceUserAvatar(UploadedFile $avatar)
    {
        $this->user->avatar = '/storage/avatars/user_'.$this->user->id.'.'.$avatar->getClientOriginalExtension();
    }

}
