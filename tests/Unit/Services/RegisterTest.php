<?php

namespace Tests\Unit;

use App\Exceptions\UserNotCreatedException;
use App\Http\Services\RegisterService;
use App\User;
use Mockery;
use Mockery\MockInterface;
use Tests\TestCase;
use App\Wrappers\UserCreateWrapper;


/**
 * Class RegisterTest
 * @package Tests\Unit
 */
class RegisterTest extends TestCase
{
    /**@var RegisterService */
    private $registerService;

    /**@var boolean */
    private $wrongCredentials;

    private const DEFAULT_CREDENTIALS = [
        'email' => 'test@gmal.com',
        'password' => 'sec',
        'name' => 'UserTestName'
    ];

    /**
     *
     */
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $userCreateMock =  $this->mockCreateUserWrapper();
        $this->registerService = new RegisterService($userCreateMock);
    }


    /**
     * A basic test example.
     *
     * @return void
     * @throws UserNotCreatedException
     */
    public function test_user_created()
    {
        $this->wrongCredentials = false;
        $credentials = self::DEFAULT_CREDENTIALS;
        $user = $this->registerService->registerUser($credentials);
        $this->assertInstanceOf(User::class, $user);
        $this->assertEquals($credentials['email'], $user->email);
        $this->assertEquals($credentials['name'], $user->name);

    }


    public function test_user_create_fails()
    {
        $this->wrongCredentials = true;
        $this->expectException(UserNotCreatedException::class);
        $this->registerService->registerUser(self::DEFAULT_CREDENTIALS);
    }


    /**
     * @return UserCreateWrapper|MockInterface
     */
    private function mockCreateUserWrapper()
    {
        /** @var UserCreateWrapper|MockInterface $SomeClass */
        $userCreateWrapper = Mockery::mock(UserCreateWrapper::class);

        $userCreateWrapper->shouldReceive('createUser')->andReturnUsing([$this, 'mockCreateUser']);
        return $userCreateWrapper;
    }

    /**
     * @param array $credentials
     * @return User|null
     */
    public function mockCreateUser(array $credentials)
    {
        // can be gotten from $this
        if ($this->wrongCredentials) {
            return null;
        }

        $user = new User();
        $user->email = $credentials['email'];
        $user->name = $credentials['name'];
        $user->password = $credentials['password'];

        return $user;
    }

}
