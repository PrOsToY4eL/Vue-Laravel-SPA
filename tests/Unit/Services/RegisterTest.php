<?php

namespace Tests\Unit;

use App\Customer;
use App\User;
use Mockery;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Wrappers\UserCreateWrapper;


class RegisterTest extends TestCase
{
    private $userCreateWrapper;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        //$this->userCreateWrapper = new UserCreateWrapper();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_user_data_invalid()
    {
        //$this->setUp();
        $credentials = [
            'email' => 'test@gmal.com',
            'password' => 'sec',
            'name' => 'UserTestName'
        ];
        $double = Mockery::mock(UserCreateWrapper::class);

        $double->shouldReceive('createUser')
            ->with($credentials)->andReturn(new User());

        $user = $double->createUser($credentials);

        $this->assertInstanceOf(User::class, $user);
        $this->assertNotNull($user);

//        $this->assertTrue($credentials['email'] == $user->email);
//        $this->assertTrue($credentials['password'] === $user->password);
//        $this->assertTrue($credentials['name'] === $user->nane);

//        $response->json('POST', 'api/auth/register',[
//            'email' => 'test@gmal.com',
//            'password' => 'sec',
//            'name' => 'UserTestName'
//        ]);
//        $response
//            ->assertStatus(401)
//            ->assertJson([
//                'emaii' => ['The email has already been taken.'],
//                'password' => ['The password must be at least 6 characters.']
//            ]);
//
//        //$this->assertTrue(true);
    }
}
