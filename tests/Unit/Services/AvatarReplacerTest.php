<?php

namespace Tests\Unit;

use App\Services\AvatarReplacerService;
use App\Services\UploadFileService;
use App\User;
use App\Wrappers\UserSaveWrapper;
use Illuminate\Http\Request;
use Faker\Factory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Image;
use Mockery;
use Storage;
use Tests\TestCase;


class AvatarReplacerTest extends TestCase
{
    /* @var AvatarReplacerService $avatarReplacerService*/
    private $avatarReplacerService;
    /* @var User $user*/
    private $user;

    private const DEFAULT_PATH = 'storage/avatars/default.png';
    private const PATH = '/storage/avatars/user_0.png';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = factory(User::class)->make(['id' => 0]);

        $uploadFileService = $this->mockUploadFileService();
        $userSaveWrapper = $this->mockUserSaveWrapper();

        $this->avatarReplacerService = new AvatarReplacerService($uploadFileService, $userSaveWrapper);
    }

    public function testAvatarReplaceWithDefault()
    {
        $user = $this->user;
        $request = new Request();

        $this->avatarReplacerService->replaceUserAvatar($request, $this->user);

        $this->assertEquals($user->avatar, $this->user->avatar);
    }

    public function testAvatarReplaceSuccess()
    {
        $avatar = UploadedFile::fake()->image('avatar.png', 100, 100)->size(100);

        $this->assertEquals(self::DEFAULT_PATH, $this->user->avatar);

        $request = new Request();
        $request->files->add(['avatar' => $avatar]);

        $this->avatarReplacerService->replaceUserAvatar($request, $this->user);

        $this->assertEquals(self::PATH, $this->user->avatar);
    }

    private function mockUploadFileService()
    {
        $mock = Mockery::mock(UploadFileService::class);
        $mock->shouldReceive('uploadUserAvatar')->andReturnUsing([$this, 'mockUploadUserAvatar']);
        return $mock;
    }

    private function mockUserSaveWrapper()
    {
        $mock = Mockery::mock(UserSaveWrapper::class);
        $mock->shouldReceive('saveUser')->andReturnUsing([$this, 'mockSaveUser']);
        return $mock;
    }

    public function mockUploadUserAvatar(UploadedFile $avatar, int $user_id)
    {
        if ($avatar instanceof UploadedFile) {
            return '/storage/avatars/user_' . $user_id . '.' . $avatar->getClientOriginalExtension();
        }
        else {
            return $this->user->avatar;
        }
    }

    public function mockSaveUser(User $user)
    {
        return true;
    }

}
